COMPILER Cuestionario

	const int // types
	  undefined = 0, integer = 1, boolean = 2, str = 3;

	enum Types {
		undefined,
		integer,
		boolean,
		str
	}

	public SymbolTable   tab;
	public CodeGenerator gen;
  
/*--------------------------------------------------------------------------*/
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  symbols = "+-*/<>=()[]{}:;.,!.?¿¡!".
  quote = '"'.
  space = ' '.
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.

TOKENS
  ident  = letter {letter | digit}.
  number = digit {digit}.
  string = quote {letter | space | digit | ',' | symbols} quote.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

PRODUCTIONS

AddOp = '+' | '-'.
MulOp = '*' | '/'.
RelOp = "==" | '<' | '>'.

Expr<out int type> = MathExpr<out type> [
  	RelOp
	(. int type1; .)
    MathExpr<out type1>  (.
		if (type != type1) SemErr("incompatible types");
		type = boolean;
	.)
].

BooleanExpr = (. int type, type1; .) MathExpr<out type> RelOp MathExpr<out type1> (. 
		if (type != type1) SemErr("incompatible types");
	.).

MathExpr<out int type> = (. int type1; .)  Term<out type> {
	AddOp Term<out type1> (.
		if (type != integer || type1 != integer) SemErr("integer type expected");
	.)
}.

Term<out int type> = Factor<out type> (. int type1; .) {
	MulOp Factor<out type1> (.
		if (type != integer || type1 != integer) SemErr("integer type expected");
	.)
}.

Factor<out int type> = (. type = undefined; .) (
	VarReference<out type>
	| '-' number    (. type = integer; .)
	| number        (. type = integer; .)
	| "true"		(. type = boolean; .)
	| "false"		(. type = boolean; .)
).


Number<out int value> = number (. value = Convert.ToInt32(t.val); .).

Ident<out string name> = ident (. name = t.val; .).
VarReference<out int type> = (. string name; .) Ident<out name> (. type = tab.getType(name); .).

Question =
	(.
	string question;
	int value = 1;
	string name;
	int inputType = -1;
	List<string> options = new List<string>();
	string correct = "";
	.)
	"question" LiteralString<out question>
	(Options | Input<out inputType> | InputAssign<out name, out inputType>)
	[ Correct<out correct> ] [ "value" Number<out value> ]
	(.
	gen.addPrint(question);
	gen.addOnCorrect(correct, value);
	.).

LiteralString<out string val> = string (. val = t.val; .).

Options = (. List<string> options = new List<string>(); .)
	"options" string (. options.Add(t.val); .)
	{ ',' string (. options.Add(t.val); .) }.

Input<out int type> = (. type = undefined; .) "input" ( "number" (. type = integer; .)  | "text" (. type = str; .) ).
InputAssign<out string name, out int type> = Ident<out name> '=' Input<out type> (. tab.setVariable(name, type); .).

Correct<out string correct> = "correct" [ "includes" ] string (. correct = t.val; .).

IfStat = "if" '(' BooleanExpr ')'
	(. /* gen... */ .)
	Stat
	(. /* gen... */ .)
	[
		(. /* gen... */ .)
		"else" Stat
		(. /* gen... */ .)
	].

WriteStat = (. int type; .) "print" (Expr<out type> | string)
	(. /* gen... */ .).

Stat = Question | IfStat | WriteStat.

Cuestionario = { Stat }.

END Cuestionario.