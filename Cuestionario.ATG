COMPILER Cuestionario

	public enum Type {
		undefined,
		integer,
		boolean,
		str
	}

	public SymbolTable   tab;
	public CodeGenerator gen;
  
/*--------------------------------------------------------------------------*/
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  symbol = "+-*/<>=()[]{}:;.,?¿¡!".
  space = ' '.
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.

TOKENS
  ident  = letter {letter | digit}.
  number = digit {digit}.
  negNumber = '-' digit {digit}.
  stringToken = '"' {letter | space | digit | symbol} '"'.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

PRODUCTIONS

// LiteralBoolean<out bool value> = (. value = True; .) ("true" | "false" (. value = False; .)).
LiteralNumber<out int value> = (number | negNumber) (. value = Convert.ToInt32(t.val); .).
LiteralPositiveNumber<out int value> = LiteralNumber<out value> (. if (value < 0) SemErr("positive number expected"); .).
LiteralString<out string val> = stringToken (.
	val = t.val.Substring(1, t.val.Length - 2); // remove quotes
.).

AddOp = '+' (. gen.addToExpr(" + "); .) |
		'-' (. gen.addToExpr(" - "); .).

MulOp = '*' (. gen.addToExpr(" * "); .) |
		'/' (. gen.addToExpr(" / "); .).

RelOp = "==" (. gen.addToExpr(" -eq "); .) |
		"!=" (. gen.addToExpr(" -ne "); .) |
		"<=" (. gen.addToExpr(" -le "); .) |
		'<'  (. gen.addToExpr(" -lt "); .) |
		">=" (. gen.addToExpr(" -ge "); .) |
		'>'  (. gen.addToExpr(" -gt "); .).

Expr<out Type type, out string expr> =
	(. type = Type.integer; .)
	MathExpr [ RelOp MathExpr (. type = Type.boolean; .) ]
	(. expr = gen.getExpr(); .).

BooleanExpr<out string expr> = MathExpr RelOp MathExpr (. expr = gen.getExpr(); .).

MathExpr = Term { AddOp Term }.
Term = NumericFactor { MulOp NumericFactor }.

NumericFactor =
	( (. int value; .) LiteralNumber<out value> (. gen.addToExpr(value.ToString()); .) ) |
	( (. Type type; .) VarReference<out type> (. if (type != Type.integer) SemErr("integer type expected"); .) ).

Ident<out string name> = ident (. name = t.val; .).
VarReference<out Type type> = (. string name; .) Ident<out name>
	(. type = tab.getType(name); gen.addToExpr("$" + name); .).

Question =
	(.
	string name;
	Type inputType = Type.undefined;
	int value = 1;
	string correct = "";
	bool includes = false;
	.)
	"question" (. string question; .) LiteralString<out question> (. gen.addPrint(question); .)
	[ "value" LiteralPositiveNumber<out value> ]
	(Options | Input<out inputType> | InputAssign<out name, out inputType>)
	[ Correct<out correct, out includes> ]
	(. gen.addAnswerCheck(correct, value, includes); .).

Correct<out string correct, out bool includes> = (. includes = false; .)
	"correct" [ "includes" (. includes = true; .) ]
	LiteralString<out correct>.

Options = (. string str; .)
	"options" LiteralString<out str> (. gen.addOption(str); .)
	{ ',' LiteralString<out str> (. gen.addOption(str); .) }.

Input<out Type type> = (. type = Type.integer; .) "input" ( "number" | "text" (. type = Type.str; .) ).
InputAssign<out string name, out Type type> = Ident<out name> '=' Input<out type> (. tab.setVariable(name, type); .).

IfStat = (. string expr; .) "if" '(' BooleanExpr<out expr> ')' (. gen.addIf(expr); .)

	Block [ "else" (. gen.addCode("else"); .) Block ] (. gen.addCode("\n\n"); .).

Block = '{' (. gen.addCode("{\n"); .) { Stat } '}' (. gen.addCode("}\n\n"); .).

WriteStat = (. Type type; string val; .) "print"
	(Expr<out type, out val> | LiteralString<out val>)
	{ ',' (Expr<out type, out val> | LiteralString<out val>) }.

Stat = Question | IfStat | WriteStat.

Cuestionario = Stat { Stat } (. gen.addFinalScore(); .).

END Cuestionario.