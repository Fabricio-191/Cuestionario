Comenzamos, es cortito. Bueno, el trabajo final. Como les había comentado, el trabajo final va a consistir en desarrollar un pequeño compiladorcito o alguna tarea parecida, digamos, que involucre el parser, el escáner y generación de código o no.

Veamos qué puede proponer cada uno cuando haga su investigación. El CoCoR, como les he dicho, es un generador de compiladores, que lo que va a tomar es una gramática atribuida y va a generar un escáner y un analizador para ese lenguaje. Dónde, digamos, bueno, estos son los objetivos, por leer un poco más detalladamente. La documentación está en este link, lo cual me lleva a este proyecto. Y lo que yo he hecho es hacer una guía, más o menos, para que puedan desenvolverse con el desarrollo del trabajo. Y esta guía cuenta de dos partes.

La parte 1 está referida a lo que es la exploración bibliográfica y estudio de CoCoR. En esencia tiene dos actividades. Una de ellas es opcional, por ejemplo, en realidad la primera actividad va a consistir en leer el manual del usuario de la herramienta para familiarizarse con la sintaxis. Y luego seguir un tutorial, que si ustedes vienen acá, este que está acá.

Este tutorial, en esencia, tiene esta carpetita. Y tiene un ejemplo, el like, que son estos likes que están acá, que voy a presentar ahora. Y esencialmente, como resumen, cómo generar compiladores con CoCoR. Y cuando ustedes lo empiecen a ver, van a ver que es todo lo que hemos visto en la materia. Porque en esencia es lo mismo en lo cual está basada la materia, o sea, la parte teórica de la materia está basada en este material de esta universidad. No obviamente nos vemos CoCoR, pero vemos todo su fundamento. Entonces, como nosotros vimos, hemos visto el escáner, el parse, el procesamiento semántico, la tabla de símbolo y la generación de código. Y hemos seguido más o menos esta estructura para construir el compilador. 

Entonces, a partir de ahí, es donde separa a CoCoR. Y bueno, acá se empieza definiendo cuáles son los conceptos que se usan, etcétera. Luego, qué es lo que hace CoCoR. Y va hablando de las... bueno, tienen la misma estética que los slides o los POI que hemos presentado. Y exactamente en algunas cosas repite los mismos ejemplos que hemos utilizado para el desarrollo de la materia. A diferencia de que acá no está Compi, que es la herramienta que nosotros se desarrolló utilizando, digamos, esta tecnología o mejor dicho, este instrumento pedagógico para poder distar la materia. O sea, en ningún momento aparece la parte de la interacción con la interfaz. Bueno, ya hablo un poquito y va explicando paso a paso cuáles son las partes, cómo se configura la herramienta y demás. Por último, tiene el caso de estudio. Que se llama TASTE o TAS, no sé cómo se pronuncia en inglés, un simple programa de gusto, gusto de programa.

Que consiste en, digamos, acá tiene el programa TASTE, en realidad es un lenguaje que se define como un lenguaje que con CoCo se produce el compilador para poder compilar este tipo de programas. Entonces, se habla de la sintax y cómo la arquitectura de la máquina virtual, lo que hemos estado viendo para el caso de CLR nosotros, de la plataforma .NET. Acá tiene su propia máquina virtual, las instrucciones que tiene esa máquina virtual, va a generar código para esa máquina virtual, las partes del programa que tiene, etcétera. Todo eso, en realidad, cuando lo bajen van a tener el código de esto. A ver si yo lo baje y lo he ejecutado y demás. Andá perfecto. A ver si está por acá. Entonces, si yo me fijo, acá tengo el código. Bueno, ahí en el tutorial dice cómo se debe ejecutar, acá están los programas, y todo es más o menos muy parecido, obviamente sacando todo, la parte de la interfaz que hemos desarrollado nosotros y demás. Pero la base es lo mismo que hemos visto en la clase, de que no van a tener problemas. Por la parte de tan beosímilo, que es un poco más reducida de lo que nosotros hemos visto. Pero todo para lo que es el programita. Bien. Ustedes pueden ir. A ver, un cachito. Ustedes pueden, digamos, en las actividades, pueden ir haciendo una y otra, viendo el manual del usuario y viendo el tutorial. Por ahí les conviene ver el tutorial y lo que no entiendan, por ahí pueden irse al manual del usuario. Después pueden consultar el libro de texto, yo tengo un montón, si necesitan me avisan. Artículos científicos, allí van a tener que hacer su búsqueda para describir a ver qué hay con CoCoR. Y foros de comunidades como Staff Overflow, que también tienen un poco de información. Y también hay un montón de información, que es lo que se llama el programa de información. La población de esta parte consiste de una parte oral y una parte escrita.

En la parte oral, la idea es explicar el funcionamiento del proyecto TASTE. Que es presentado en el libro de texto. Y en el libro de texto, la idea es que la gente pueda ver la parte oral. En la parte oral, la idea es explicar el funcionamiento del proyecto TASTE. Que es presentado en el tutorial. O sea, acá la idea es cómo se ejecuta, cuál es el lenguaje, se pone un ejemplito, lo copilan, lo ejecutan y vemos qué es lo que está haciendo.

Acuérdense que todo esto es por consola. Y la parte escrita es hacer un informe con la actividad desarrollada. Y acá les pongo una guía, más o menos, que es una, como la palabra lo dice, es una guía, es algo tentativo, no algo taxativo. O sea, ustedes pueden usar algunos puntos y otros no. Por ejemplo, para la introducción podrían hablar de historia del desarrollo, breves reseñas históricas y principales características, arquitectura de Coco R. Explicar cómo funciona, primeros pasos, instalación, creación de un simple enlizador, éxito. Analisis de salida del compilador generado. Los conceptos fundamentales de compiladores relacionados con Coco R. Por ejemplo, cómo el análisis léxico en Coco R. Explicar la relación que hay de automata finita. O sea, estas son cosas que yo he colocado como una guía para estructurar un informe que ustedes pueden decir esto o no, esto o sí, o voy a agregar tal cosa acá, voy a sacar. Eso va a ser en función de su exploración, de su búsqueda de información, digamos, de su tarea de investigación. Bueno, la segunda parte ya va a consistir en desarrollar un compilador para un lenguaje de programación. Por ejemplo, acá hemos visto que es para el lenguaje TASTE.

Entonces está todo el desarrollo y si ustedes vienen acá van a ver este. Por ejemplo, que hay unos puntos a bat que permiten ejecutar. Por ejemplo, veamos este. Como se construye el compilador. Entonces este punto lo que va a hacer es tomar todo este. Todos estos códigos generar un exe. Ese exe va a ser mi compilador. Después compiladores se lo voy a tener un ejemplo, voy a ejecutar con ese compilador. Voy a obtener un ejecutable para la máquina virtual. A la cual estoy para la cual estoy haciendo el ejecutable. No adelanto más porque hay una tarea que tienen que hacer ustedes. O sea, que eso va a ser de cierta forma, digamos, ese pequeño en el literatural. Ustedes vieron que hay un, van a ver que un lenguaje muy pequeño, un lenguaje muy grande depende de la tarea de investigación. Tienen que hacer lo mismo pero buscando un ejemplo que puede estar en la información o proponiendo algún compilador que a ustedes se lo ocurra. Algún DCL, sea un lenguaje de dominio, digamos. De dominio específico, no sé, supongamos. Por eso me ocurre algún lenguaje para una especie de Arduino o algo más chiquito que me imprima o que me imprima. O que me imprima un lenguaje de un tipo de Arduino. O que me imprima un lenguaje de un tipo de Arduino. O que me imprima un lenguaje de un tipo de Arduino. O algo más chiquito que me imprima o algo para imprimir un lenguaje para hacer carteles. O sea, hay millones de cosas que se pueden ocurrir muy simples, digamos. Entonces, ¿eso lo pueden proponer o buscar alguno de los que aparecen en la bibliografía que han... La bibliografía que han revisado. Entonces, digamos que la primera tarea de la parte 2 es seleccionar cuál va a ser su caso de estudio. O sea, sobre qué o para qué van a construir el compilador. Después van a hacer ejecución de pruebas. En realidad es mostrar cómo con un juego de programas de pruebas que tome ese compilador y genere el código. O hace una traducción. Por ejemplo, pueden ir de QML a JSON, de JSON a otra cosa. Hay varias cosas que pueden hacer. Ustedes van a proponer eso. También es parte de lo que propongan, la complejidad. Todo eso tiene que ver después con la nota que ponga, que se pongan por la evaluación de cada uno tiene una complejidad. Cada cosa que elija. Acá pueden utilizar, sugiero utilizar Inteligencia de Tecnología Generativa que ayuda bastante a construir una gramática. Para pequeños programas, obviamente. Para pequeños lenguajes, digamos. La evaluación de esta parte va a consistir de una parte oral y una parte escribida. La parte oral, cada grupo va a defender el trabajo organizado con la ayuda de una presentación o slide, digamos. Un PowerPoint. Y la evaluación escrita va a consistir en la presentación escrita de los plazos que se siguieron para implementar el compilador. Obviamente describiendo el lenguaje que, mejor dicho, cuál es el objeto del compilador. Luego, para terminar, lo que van a hacer, una vez que ya, acá ya es como que hemos rendido, les dije yo, como si hubiéramos rendido ya el examen final. Para terminar van a tener que integrar los dos informes, consolidarlos mismos en un solo informe final y colocar una portada de trabajo final, de la Universidad de San Juan, compilador, etcétera, etcétera. Y las fotos, ya sea si lo haces individual o en grupo. Esto es importante porque después, los que no rinden ahora vienen después en unos años y yo no sé si fueron alumnos o no, porque se me olvidan. Las caras no. Entonces. Y luego subir el informe en la carpeta personal del slide. Si trabajan en grupo, es el mismo informe. Solo que tienen que estar cargados en su carpeta personal o subidos como les puedo decir. Bueno. Eso es todo. ¿Alguna duda? ¿Los grupos de a cuánto, Profe? ¿Cómo? Los grupos de a cuánto. ¿Los grupos de a cuánto? Los grupos de a cuánto. Los grupos de a cuánto. Los grupos de a cuánto. ¿Los grupos de a cuánto? Los grupos de a cuánto. Dos, tres. No más. Lo que ya vienen manejando ustedes de optimización. O lo que han hecho ahora, no sé. Ok. Bueno. Entonces. La semana que viene. Si bien vamos a dejarle dos semanas. Digamos que esta primera etapa tendría que estar resuelta. Dijimos que la semana que viene se acuerda que íbamos a tomar una pequeña. Una pequeña evaluación de generación de código. Cinco preguntitas. Como para que quede ya evaluada la generación de código. Y diría que el 10. El 10 de octubre. Evolvemos la primera parte. Explicar el funcionamiento de TASTS. Ayer lo agarré y lo hice en una tarta. Así que ustedes lo tienen que hacer también igual. No es tan difícil. Son los mismos conceptos que están en. Que hemos visto. A ver como funciona. Hay que escucharlo. Probarlo. Y ponerle datos. Eso es fácil. Eso estaría evaluándose para el día 10. Entonces acá vamos a poner. Fecha tentativa. El día de la universidad. Si no es el 10 va a ser el 11. Creo que va a ser mejor el 11. Porque parece que es el día de la universidad. Y no va a haber clase. Vamos a poner 11. Y ahí también vemos como van avanzando con esto. Porque la idea es que a medida que van estudiando. O mejor a medida que van leyendo esto. Vayan armando el informe. ¿Hm? Profes. El 11 creo que es feriado. ¿Y el 10? Bueno. Lo dejemos para el 10 chicos. Si es feriado y demás. Lo pasamos por la otra semana. Si es feriado y demás. Lo pasamos por la otra semana. ¿Les parece? Si puede ser para la otra semana. Yo para no irnos tan lejos. Porque a medida que se va más lejos. Después le va quedando menos tiempo. Acuérdense que ya es octubre. Si es noviembre. Y esto estaría bueno. Por lo menos una fecha tentativa de evaluación. 

Dos semanas está bien. Vamos a poner. Entonces. ¿Cuándo sería la otra? 17 y 18. Lo vamos a dejar para el 10. Cualquier cosa lo vamos viendo.

Si es feriado lo pasamos por la otra semana. Como para que ustedes presenten algún... Esto es provisorio. Un prototipo. Que se diría del lenguaje informático. Para el informe este. Porque la idea es que lo vayan construyendo. Bueno. Después que veamos esto. O sea que vamos viendo. Que pasaron a esta etapa. Vamos a ponerle fecha al... A esta otra evaluación. Tienen un mes ahí parece. Pero yo tengo que ir viendo. Yo voy a hacer un seguimiento. Toda la semana para ver. Cuáles han sido los problemas que tienen. Que han avanzado. Así que por favor conformense en grupos. Hálenme una lista. Y pásenla por WhatsApp. Para yo saber. Quiénes son los grupos. Como están conformados. Y yo hacer el seguimiento que tengo que hacer. Para ver cómo va. Bueno. ¿Alguna duda? Por ahora no, profe.